{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ove",
				"overlapY"
			],
			[
				"dx",
				"dx1"
			],
			[
				"std",
				"std::endl"
			],
			[
				"max",
				"maxOverlapX"
			],
			[
				"are",
				"maxAreaID"
			],
			[
				"maxa",
				"maxArea"
			],
			[
				"move",
				"moveCS"
			],
			[
				"colli",
				"collided"
			],
			[
				"maxare",
				"maxAreaID"
			],
			[
				"moce",
				"moveCS"
			],
			[
				"pla",
				"placeholderVel"
			],
			[
				"flo",
				"float"
			],
			[
				"overla",
				"overlapY"
			],
			[
				"abs",
				"absDX2"
			],
			[
				"ab",
				"absDX1"
			],
			[
				"abd",
				"absDY2"
			],
			[
				"abds",
				"absDY1"
			],
			[
				"overl",
				"overlap"
			],
			[
				"over",
				"overlapX"
			],
			[
				"dy",
				"dy1"
			],
			[
				"overa",
				"overlapY"
			],
			[
				"dra",
				"drag"
			],
			[
				"place",
				"placeholderVel"
			],
			[
				"Xinc",
				"Xincreased2"
			],
			[
				"xin",
				"Xincreased1"
			],
			[
				"cou",
				"cout"
			],
			[
				"mo",
				"moveable"
			],
			[
				"no",
				"NONE"
			],
			[
				"COL",
				"CollisionComponent"
			],
			[
				"collided",
				"collidedWith"
			],
			[
				"create",
				"createBox"
			],
			[
				"gri",
				"grid"
			],
			[
				"mov",
				"moveC"
			],
			[
				"SDL_q",
				"SDL_QueryTexture"
			],
			[
				"Tim",
				"Timer::elapsed"
			],
			[
				"Wnd",
				"Window::RenderText"
			],
			[
				"act",
				"activeIndexes"
			],
			[
				"gr",
				"gridW"
			],
			[
				"grid",
				"grid"
			],
			[
				"index",
				"index"
			],
			[
				"spri",
				"spriteCS"
			],
			[
				"h",
				"h"
			],
			[
				"G",
				"GAMEOVER"
			],
			[
				"it",
				"intersection"
			],
			[
				"end",
				"end"
			],
			[
				"begi",
				"begin"
			],
			[
				"inde",
				"index"
			],
			[
				"ind",
				"index"
			],
			[
				"collis",
				"collisionCS"
			],
			[
				"re",
				"return"
			],
			[
				"using",
				"unsigned"
			],
			[
				"ce",
				"cellSize"
			],
			[
				"in",
				"index"
			],
			[
				"Q",
				"QTs"
			],
			[
				"col",
				"collisionCS"
			],
			[
				"reu",
				"return"
			],
			[
				"spr",
				"spriteMap"
			],
			[
				"SPr",
				"SpriteComponent"
			],
			[
				"get",
				"getIndex"
			],
			[
				"fa",
				"false"
			],
			[
				"st",
				"std::cout"
			],
			[
				"de",
				"depth"
			],
			[
				"scre",
				"screenSurface"
			],
			[
				"clea",
				"clear"
			],
			[
				"collide",
				"collidedWith"
			],
			[
				"unsinged",
				"unsigned"
			],
			[
				"obj",
				"objs"
			],
			[
				"fits",
				"fits"
			],
			[
				"us",
				"unsigned"
			],
			[
				"collision",
				"collisionUpdate"
			],
			[
				"spirte",
				"spriteMap"
			],
			[
				"Move",
				"MoveComponent"
			],
			[
				"Co",
				"CollisionComponent"
			],
			[
				"Con",
				"ControllerComponent"
			],
			[
				"img",
				"img"
			],
			[
				"tex",
				"textures"
			],
			[
				"bin",
				"binDIR"
			],
			[
				"cha",
				"changeDir"
			],
			[
				"ob",
				"objEnd"
			],
			[
				"cs",
				"CS"
			],
			[
				"off",
				"offset"
			],
			[
				"offse",
				"offsetY"
			],
			[
				"curr",
				"currentFrame"
			],
			[
				"curre",
				"currentAnimation"
			],
			[
				"cur",
				"currentAnimation"
			],
			[
				"cu",
				"currentAnimation"
			],
			[
				"fra",
				"frames"
			],
			[
				"frame",
				"frameTimer"
			],
			[
				"anim",
				"animIt"
			],
			[
				"play",
				"playingAnimation"
			],
			[
				"cli",
				"clipRect"
			],
			[
				"x",
				"x"
			],
			[
				"ela",
				"elapsed"
			],
			[
				"Timer",
				"Timer::elapsed"
			],
			[
				"t",
				"timePoint1"
			],
			[
				"draw",
				"drawRect"
			],
			[
				"CSYS",
				"CSys"
			],
			[
				"CS",
				"CSys"
			],
			[
				"ma",
				"moveC_map"
			],
			[
				"m",
				"map	std::map"
			],
			[
				"time",
				"timePoint1"
			],
			[
				"inc",
				"include"
			],
			[
				"Sprite",
				"SpriteComponent"
			],
			[
				"vec",
				"Vec2D"
			],
			[
				"En",
				"EntityId"
			],
			[
				"wIND",
				"Window"
			],
			[
				"im",
				"imgRect"
			],
			[
				"SR",
				"SRCDIR"
			],
			[
				"SCRE",
				"SCREEN_HEIGHT"
			],
			[
				"nu",
				"nullptr"
			],
			[
				"red",
				"renderer"
			],
			[
				"te",
				"tex"
			],
			[
				"SDL_REnder",
				"SDL_RenderCopy"
			],
			[
				"n",
				"NULL"
			],
			[
				"SDL_Texture",
				"SDL_Texture"
			],
			[
				"load",
				"loadTexture"
			],
			[
				"lo",
				"logSDLError"
			],
			[
				"sdl_crea",
				"SDL_CreateTextureFromSurface"
			],
			[
				"Crafty",
				"crafty-release"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/myMake.sublime-build",
			"settings":
			{
				"buffer_size": 441,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 699,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 2060,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/components.cpp",
			"settings":
			{
				"buffer_size": 7240,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/components.h",
			"settings":
			{
				"buffer_size": 2321,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/entities.cpp",
			"settings":
			{
				"buffer_size": 1696,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Omar/Desktop/SFMLTEST/src/components.hpp",
			"settings":
			{
				"buffer_size": 5298,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/CS.h",
			"settings":
			{
				"buffer_size": 683,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"../include/system.h\"\n#include \"../include/window.h\"\n#include \"../include/CS.h\"\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <SDL2/SDL.h>\n\nfloat Timer::start{0};\nfloat Timer::end{0};\nfloat Timer::elapsed{0};\nfloat Timer::frame{1000.f/60.f};\nfloat Timer::slice{0.f};\n\ntemplate<>\nVec2<float> Vec2<float>::operator*(float const& n){\n	x *= n;\n	y *= n;\n	return *this;\n}\n\ntemplate<>\nVec2<float> Vec2<float>::operator*=(float const& n){\n	x *= n;\n	y *= n;\n	return *this;\n}\ntemplate<>\nVec2<float> Vec2<float>::operator+=(Vec2<float> const& v){\n	x += v.x;\n	y += v.y;\n	return *this;\n}\ntemplate<>\nVec2<float> Vec2<float>::operator-=(Vec2<float> const& v){\n	x -= v.x;\n	y -= v.y;\n	return *this;\n}\n\nint DELTA = 0;\nbool outOfBounds(unsigned long id, SDL_Rect& bounds){\n	CollisionComponent* c = CS::collisionCS[id];\n	if(c->rect.x < bounds.x || c->rect.x + c->rect.w > bounds.x + bounds.w || c->rect.y < bounds.y || c->rect.y + c->rect.h > bounds.y + bounds.h){\n		if(c->rect.x < bounds.x){\n			c->moveC->pos.x = bounds.x+DELTA;\n			c->touching |= RIGHT;\n		} else if( c->rect.x + c->rect.w > bounds.x + bounds.w) {\n			c->moveC->pos.x = bounds.x + bounds.w - c->rect.w-DELTA;\n			c->touching |= LEFT;\n		}\n		if(c->rect.y < bounds.y){\n			c->moveC->pos.y = bounds.y+DELTA; \n			c->touching |= TOP;\n		} else if( c->rect.y + c->rect.h > bounds.y + bounds.h) {\n			c->moveC->pos.y = bounds.y + bounds.h - c->rect.h-DELTA;\n			c->touching |= FLOOR;\n		}\n		return true;\n	}\n	return false;\n}\n\nbool checkOverlap(unsigned long id1, unsigned long id2, SDL_Rect* result){\n	SDL_Rect r1, r2;\n	r1 = CS::collisionCS[id1]->rect;\n	r2 = CS::collisionCS[id2]->rect;\n	if(SDL_IntersectRect(&r1, &r2, result))\n			return true;\n	return false;\n\n}\n\nvoid Grid::clear(){\n	activeIndexes.clear();\n}\n\nvoid Grid::draw(){\n	SDL_Rect r;\n	for(int i =0; i<((bounds.w*bounds.h)/(cellSize*cellSize));i++){\n		r = getRect(i);\n		if(!activeIndexes[i])\n			Window::DrawRect(&r, 0, 0, 100);\n		else\n			Window::DrawRect(&r, 255, 0, 0);\n	}\n}\n\nSDL_Rect Grid::getRect(const int index){\n	SDL_Rect r;\n	r.x = cellSize*index - bounds.w*floor(index/(bounds.w/cellSize));\n	r.y = floor(index/(bounds.w/cellSize))*cellSize;\n	r.w = cellSize;\n	r.h = cellSize;\n	return r;\n}\n\nbool Grid::overlap(const unsigned long &id1,const unsigned long &id2, SDL_Rect* result){\n	std::vector<int> v1 = CS::collisionCS[id1]->gridIndex;\n	if(v1[0]==-1)\n		return false;\n	std::vector<int> v2 = CS::collisionCS[id2]->gridIndex;\n	if(v2[0]==-1)\n		return false;\n	std::sort(v1.begin(), v1.end());\n	std::sort(v2.begin(), v2.end());\n	std::vector<int> v3(v1.size()+v2.size(), -1);\n	std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());\n	if(v3[0]!=-1){\n		if(checkOverlap(id1, id2, result))\n			return true;\n	}\n	else{\n		return false;\n	}\n\n	return false;\n\n}\n\nstd::vector<int> Grid::getIndex(unsigned long id){\n	SDL_Rect r1 = CS::collisionCS[id]->rect;\n	int xstart = int((floor(r1.x/cellSize)));\n	if(r1.x < bounds.x)\n		xstart = 0;\n	int xend = int((floor((r1.x+r1.w)/cellSize)));\n	int ystart = int((floor(r1.y/cellSize)));\n	if(r1.y < bounds.y)\n		ystart = 0;\n	int yend = int((floor((r1.y+r1.h)/cellSize)));\n	if(r1.x > bounds.x+bounds.w || r1.x +r1.w < bounds.x || r1.y > bounds.y+bounds.h || r1.y +r1.h < bounds.y){\n		return std::vector<int>(1, -1);\n	}\n	std::vector<int> indexes;\n	int index = xstart + ystart*floor(bounds.w/cellSize);\n	//std::cout << index << std::endl;\n	for(int i=0; i<(yend-ystart+1); i++){\n		for(int g=0; g<(xend-xstart+1); g++){\n			index = xstart+g+ystart*floor(bounds.w/cellSize) + floor(bounds.w/cellSize)*i;\n			activeIndexes[index] = true;\n			indexes.push_back(index);\n		}\n\n	}\n\n	return indexes;\n}\n\nQuadTree::QuadTree(int x, int y, int w, int h, unsigned int d): QTs(4, nullptr){\n	bounds.x = x;\n	bounds.y = y;\n	bounds.w = w;\n	bounds.h = h;\n	depth = d;\n}\n\nvoid QuadTree::split(){\n		QTs[0] = new QuadTree(bounds.x, bounds.y, bounds.w/2, bounds.h/2, depth+1);\n		QTs[1] = new QuadTree(bounds.x+bounds.w/2, bounds.y, bounds.w/2, bounds.h/2, depth+1);\n		QTs[2] = new QuadTree(bounds.x, bounds.y+bounds.h/2, bounds.w/2, bounds.h/2, depth+1);\n		QTs[3] = new QuadTree(bounds.x+bounds.w/2, bounds.y+bounds.h/2, bounds.w/2, bounds.h/2, depth+1);\n\n};\n\nint QuadTree::getIndex(unsigned long id){\n	int index = -1;\n	SDL_Rect* r = &CS::collisionCS[id]->rect;\n	if(r->x < (bounds.x + bounds.w/2) && (r->x + r->w) < (bounds.x + bounds.w/2)){\n		if(r->y < bounds.y + bounds.h/2 && r->y + r->h < bounds.y + bounds.h/2)\n			index = 0;\n		else if(r->y < bounds.y + bounds.h && r->y + r->h < bounds.y + bounds.h && r->y > bounds.y + bounds.h/2)\n			index = 2;\n			\n	}\n	else if(r->x < bounds.x + bounds.w && r->x + r->w < bounds.x + bounds.w && r->x > (bounds.x + bounds.w/2)){\n		if(r->y < bounds.y + bounds.h/2 && r->y + r->h < bounds.y + bounds.h/2)\n			index = 1;\n		else if(r->y < bounds.y + bounds.h && r->y + r->h < bounds.y + bounds.h && r->y > bounds.y + bounds.h/2)\n			index = 3;\n	}\n	if((r->x < bounds.x && r->x + r->w < bounds.x) || (r->x > bounds.x + bounds.w))\n		index = -2;\n	if((r->y < bounds.y && r->y + r->h < bounds.y) || (r->y > bounds.y + bounds.h))\n		index = -2;\n\n	return index;\n}\n\nvoid QuadTree::insert(unsigned long id){\n	int index = getIndex(id);\n	if(QTs[0] != nullptr){\n		if(index != -1){\n				QTs[index]->insert(id);\n				return;\n		}\n	}\n	if(index != -2)\n	objs.push_back(id);\n	if(objs.size() > toSplit && depth < maxDepth){\n		if(QTs[0] == nullptr){\n			split();\n		}\n\n		for(unsigned int i = 0; i < objs.size(); i++){\n			index = getIndex(objs[i]);\n			if(index > -1 && objs[i] != 0){\n				QTs[index]->insert(objs[i]);\n				objs.erase(objs.begin()+i);\n				--i;\n			}\n		}\n	}\n}\n\nvoid QuadTree::remove(unsigned long id){\n	for(unsigned int i = 0; i < objs.size(); i++){\n		if(objs[i] == id){\n			objs.erase(objs.begin()+i);\n			return;\n		}\n	}\n	if(QTs[0] != nullptr){\n		for (unsigned int i=0;i<QTs.size();i++){\n			QTs[i]->remove(id);\n		}\n	}\n}\n\nvoid QuadTree::clear(){\n	if(QTs[0] != nullptr){\n		for (unsigned int i=0;i<QTs.size();i++){\n			QTs[i]->clear();\n			delete QTs[i];\n		}\n	}\n	objs.clear();\n}\n\nbool QuadTree::overlap(unsigned long id1, unsigned long id2, SDL_Rect* result){\n	\n	if(!getObject(id1)) return false;\n	if(!getObject(id2)) return false;\n	std::cout << \"ASFD\" << std::endl;\n	SDL_Rect *r1 = &CS::collisionCS[id1]->rect, *r2 = &CS::collisionCS[id2]->rect;\n	if(SDL_IntersectRect(r1, r2, result)){\n		std::cout << r1->x << std::endl;\n		return true;\n	}\n	else{\n		return false;\n\n	}\n}\n\nbool QuadTree::getObject(unsigned long id){\n	std::cout << objs.size() << std::endl;\n	for(unsigned int i = 0; i < objs.size(); i++){\n\n		if(objs[i] == id){\n			return true;\n		}\n	}\n	if(QTs[0] != nullptr) {\n		std::cout << QTs[0] << std::endl;\n			if(QTs[0]->getObject(id) || QTs[1]->getObject(id) \n					|| QTs[2]->getObject(id) || QTs[3]->getObject(id))\n				return true;\n	}\n	return false;\n}\n\nvoid QuadTree::draw(){\n	if(QTs[0] != nullptr) {\n		for (unsigned int i=0;i<QTs.size();i++){\n			QTs[i]->draw();\n		}\n	}\n	Window::DrawRect(&bounds, 225, 255, 255);\n}\n\nvoid collide(eId e1, eId e2){\n	CollisionComponent* c1 = CS::collisionCS[e1];\n	CollisionComponent* c2 = CS::collisionCS[e2];\n	if(!c1->moveable && !c2->moveable)\n	{\n		return;\n	}\n\n	//create 2 rects. They are used to determine which direction the collision has taken place.\n	SDL_Rect r1, r2;\n	float dx1 = c1->moveC->deltaPos.x - c1->moveC->pos.x;\n	float dy1 = c1->moveC->deltaPos.y - c1->moveC->pos.y;\n	float dx2 = c2->moveC->deltaPos.x - c2->moveC->pos.x;\n	float dy2 = c2->moveC->deltaPos.y - c2->moveC->pos.y;\n	bool absDX1 = (dx1>0)?dx1:-dx1;\n	bool absDY1 = (dy1>0)?dy1:-dy1;\n	bool absDX2 = (dx2>0)?dx2:-dx2;\n	bool absDY2 = (dy2>0)?dy2:-dy2;\n	r1.x = c1->moveC->pos.x - (dx1>0?dx1:0);\n	r2.x = c2->moveC->pos.x - (dx2>0?dx2:0);\n	r1.y = c1->moveC->pos.y - (dy1>0?dy1:0);\n	r2.y = c2->moveC->pos.y - (dy2>0?dy2:0);\n	r1.w = c1->rect.w+absDX1;\n	r2.w = c2->rect.w+absDX2;\n	r1.h = c1->rect.h+absDY1;\n	r2.h = c2->rect.h+absDY2;\n\n	// SDL_Rect overlapRect;\n	// SDL_IntersectRect(&r1, &r2, &overlapRect);\n	float overlapX=0, overlapY=0;\n	int BIAS = 4;\n	\n	if(r1.x != r2.x)\n	{\n		float maxOverlapX = absDX1 + absDX2 + BIAS;\n		if(r1.x < r2.x)\n		{\n			overlapX = r1.x + r1.w - r2.x;\n			if(overlapX > maxOverlapX)\n				overlapX = 0;\n			else{\n				c1->touching |= LEFT;\n				c2->touching |= RIGHT;\n			}\n		} else  {\n			overlapX = -(r2.x + r2.w - r1.x);\n			if(-overlapX > maxOverlapX)\n				overlapX = 0;\n			else{\n				c1->touching |= RIGHT;\n				c2->touching |= LEFT;\n			}\n		}\n		//std::cout << maxOverlapX << \" \" << overlapX << std::endl;\n	}\n\n	if(overlapX != 0){\n		if(!c2->moveable){\n			c1->moveC->setPosition(c1->moveC->pos.x - overlapX, c1->moveC->pos.y);\n			c1->moveC->vel.x = c2->moveC->vel.x - c1->moveC->acc.x;\n		}\n		else if(!c1->moveable){\n			c2->moveC->setPosition(c2->moveC->pos.x + overlapX, c2->moveC->pos.y);\n			c2->moveC->vel.x = c1->moveC->vel.x - c2->moveC->acc.x;\n		}\n	}\n\n	if(r1.y != r2.y)\n	{\n		float maxOverlapY = absDY1 + absDY2 + BIAS;\n		if(r1.y < r2.y)\n		{\n			overlapY = r1.y + r1.h - r2.y;\n			if(overlapY > maxOverlapY)\n				overlapY = 0;\n			else{\n				c1->touching |= FLOOR;\n				c2->touching |= TOP;\n			}\n		} else  {\n			overlapY = -(r2.y + r2.h - r1.y);\n			if(-overlapY > maxOverlapY)\n				overlapY = 0;\n			else{\n				c1->touching |= TOP;\n				c2->touching |= FLOOR;\n			}\n		}\n		//std::cout << maxOverlapY << \" \" << overlapY << std::endl;\n	}\n	std::cout << \"OVERLAPY: \" << overlapY << std::endl;\n\n	if(overlapY != 0){\n		if(!c2->moveable){\n			c1->moveC->setPosition(c1->moveC->pos.x, c1->moveC->pos.y-overlapY);\n			c1->moveC->vel.y = c2->moveC->vel.y;// - c1->moveC->acc.y;\n		}\n		else if(!c1->moveable){\n			c2->moveC->setPosition(c2->moveC->pos.x, c2->moveC->pos.y+overlapY);\n			c2->moveC->vel.y = c1->moveC->vel.y;// - c2->moveC->acc.y;\n		}\n	}\n	//c1->moveC->pos.y -= overlapY;\n	//c2->moveC->pos.x = ;\n	// if(r1.x < r2.x){\n	// 	//SIDE TOUCHING CODE HERE\n	// 	//c1 is touching left side\n	// 	//c2 is touching right side\n	// 	overlapX = overlapRect.w;\n	// 	c1->moveC->pos.x = \n		\n	// } else if(r1.x > r2.x) {\n	// 	//opposite\n	// 	overlapX = -overlapRect.w;\n	// 	c1->touching |= RIGHT;\n	// 	c2->touching |= LEFT;\n	// }\n	// if(r1.y < r2.y) {\n	// 	//UP AND DOWN TOUCHING CODE\n	// 	//c1 is touching down or floor\n	// 	//c2 is touching up or ceiling\n	// 	overlapY = overlapRect.h;\n	// 	c1->touching |= FLOOR;\n	// 	c1->touching |= TOP;\n	// } else if (r1.y > r2.y) {\n	// 	//opposite\n	// 	overlapY = -overlapRect.h;\n	// 	c1->touching |= TOP;\n	// 	c1->touching |= FLOOR;\n	// }\n	// c1->moveC->pos = c1->moveC->deltaPos;\n	// c2->moveC->pos = c2->moveC->deltaPos;\n	// Vec2<float> placeholderVel = c1->moveC->vel;\n		\n}\n\nvoid seperateX(eId e1, eId e2){\n\n}\n\nvoid seperateY(eId e1, eId e2){\n\n}",
			"file": "src/system.cpp",
			"file_size": 11069,
			"file_write_time": 130541658943121429,
			"settings":
			{
				"buffer_size": 10649,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/system.h",
			"settings":
			{
				"buffer_size": 1422,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/window.cpp",
			"settings":
			{
				"buffer_size": 3349,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/window.h",
			"settings":
			{
				"buffer_size": 2835,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/entities.h",
			"settings":
			{
				"buffer_size": 118,
				"line_ending": "Windows",
				"name": "#ifndef ENTITIES_H"
			}
		}
	],
	"build_system": "Packages/User/myMake.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"pac",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Discover Packages"
			],
			[
				"cle",
				"Build: Clean"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"clea",
				"Build: Clean"
			],
			[
				"clean",
				"Build: Clean"
			]
		],
		"width": 664.0
	},
	"console":
	{
		"height": 371.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/SDLTEST",
		"/C/dev/SDLTEST/bin",
		"/C/dev/SDLTEST/data"
	],
	"file_history":
	[
		"/C/Users/Omar/Desktop/SFMLTEST/src/system.cpp",
		"/C/dev/SDLTEST/src/main.cpp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/C++.sublime-settings",
		"/C/dev/SDLTEST/bin/terminal.glue",
		"/C/dev/SDLTEST/20e9789b-f58a-439b-8b8d-3411319382ce.dmp",
		"/C/dev/SDLTEST/fd8ca7fb-a8dc-40e7-9764-a500df7a3066.dmp",
		"/C/dev/SDLTEST/README.md",
		"/C/Users/Omar/Desktop/SFMLTEST/src/deleted controls code in update().txt",
		"/C/Users/Omar/Desktop/SFMLTEST/src/game.cpp",
		"/C/dev/SDLTEST/src/game.cpp",
		"/C/dev/SDLTEST/include/system.h",
		"/C/dev/SDLTEST/data/hello.png",
		"/C/dev/SDLTEST/bin/LICENSE.jpeg.txt",
		"/C/dev/SDLTEST/data/gameover.bmp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/myMake.sublime-build",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/Makefile/Make.sublime-build",
		"/C/dev/SDLTEST/include/cleanup.h",
		"/C/Program Files (x86)/Sublime Text 2/Pristine Packages/Makefile.sublime-package",
		"/C/Program Files/Sublime Text 3/Packages/Makefile.sublime-package",
		"/C/dev/SDLTEST/src/window.cpp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/clang_format_custom.sublime-settings",
		"/C/dev/SDLTEST/include/window.h",
		"/C/dev/SDLTEST/src/DELETED.cpp",
		"/C/dev/SDLTEST/include/game.h",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/myMake.sublime-build",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/mingw32-make.sublime-build",
		"/C/dev/SDLTEST/src/game.h",
		"/C/dev/SDLTEST/src/cleanup.h",
		"/C/dev/SDLTEST/src/window.h",
		"/C/dev/SDLTEST/src/Makefile",
		"/C/dev/SDLTEST/Makefile",
		"/C/mathart.cpp",
		"/C/MathPic.ppm",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/Distraction Free.sublime-settings",
		"/C/Users/Omar/Desktop/SFMLTEST/main.cpp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/SFML2_C++.sublime-build",
		"/C/Users/Omar/myApp/game.js",
		"/C/Users/Omar/Desktop/SFMLTEST/build&run.bat",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/C++/C++.sublime-build",
		"/C/Users/Omar/Desktop/SFMLTEST/compile.sh",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/clangSFML.sublime-build",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/C++/old_C++.sublime-build",
		"/C/Users/Omar/Desktop/EULER/P18.py",
		"/C/Users/Omar/Desktop/P18.py",
		"/C/Users/Omar/Desktop/htmlTest/test.html",
		"/C/Users/Omar/Desktop/htmlTest/scripts/app.js",
		"/C/Users/Omar/Desktop/craftyTest.html"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\dev\\SDLTEST\\src",
			"C:\\dev\\SDLTEST\\bin"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"2",
			"x",
			"1",
			"c1->moveC->pos.x > c1->moveC->deltaPos.x",
			"maxV",
			"rect.",
			"w",
			"x",
			"spee",
			"gridH",
			"gridW",
			"gridY",
			"gridX",
			"it",
			"x",
			"w",
			"x",
			"1",
			"auto",
			"x",
			"depth < maxDepth",
			"QTs.size() > 0",
			"int",
			"r.",
			"Vec2<float>",
			"maxVel",
			"maxVel.y",
			"maxVel.x",
			"%10",
			"x",
			"->vec",
			"vec",
			"->x",
			"->y",
			"vx",
			"vy",
			"CSys",
			"test",
			"CSys::moveCS[test]",
			"[1]",
			"1",
			".map",
			"map",
			"1",
			"game.exe"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"1",
			"y",
			"2",
			"Xincreased",
			"moveC->pos.",
			"h",
			"y",
			"bounds.h",
			"bounds.w",
			"bounds.y",
			"bounds.x",
			"checking",
			"y",
			"h",
			"yh",
			"y",
			"2",
			"it-first",
			"unsigned int",
			"y",
			"QTs[0] != nullptr",
			"unsigned int",
			"auto",
			"r->",
			"Vec2f",
			"maxV",
			"mVy",
			"mVx",
			"/RAND_MAX",
			"y",
			"->vel",
			"vel",
			"->pos.x",
			"->pos.y",
			"vec.x",
			"vec.y",
			"CS",
			"id",
			"moveC",
			"[test]",
			"",
			"SPEED"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/myMake.sublime-build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 441,
						"regions":
						{
						},
						"selection":
						[
							[
								363,
								363
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 699,
						"regions":
						{
						},
						"selection":
						[
							[
								653,
								653
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2060,
						"regions":
						{
						},
						"selection":
						[
							[
								1309,
								1309
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 684.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/components.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7240,
						"regions":
						{
						},
						"selection":
						[
							[
								4759,
								4759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3257.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "include/components.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2321,
						"regions":
						{
						},
						"selection":
						[
							[
								754,
								754
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 99.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/entities.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1696,
						"regions":
						{
						},
						"selection":
						[
							[
								544,
								544
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 57.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/Omar/Desktop/SFMLTEST/src/components.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5298,
						"regions":
						{
						},
						"selection":
						[
							[
								162,
								162
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 513.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "include/CS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 683,
						"regions":
						{
						},
						"selection":
						[
							[
								485,
								485
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/system.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10649,
						"regions":
						{
						},
						"selection":
						[
							[
								8857,
								8853
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 6382.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "include/system.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1422,
						"regions":
						{
						},
						"selection":
						[
							[
								254,
								254
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3349,
						"regions":
						{
						},
						"selection":
						[
							[
								1338,
								1338
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 551.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "include/window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2835,
						"regions":
						{
						},
						"selection":
						[
							[
								1902,
								1902
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 342.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "include/entities.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 118,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								110
							]
						],
						"settings":
						{
							"auto_name": "#ifndef ENTITIES_H",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 262.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"project": "project.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"com",
				"src\\components.cpp"
			],
			[
				"cs",
				"include\\CS.h"
			],
			[
				"comp",
				"C:\\Users\\Omar\\Desktop\\SFMLTEST\\src\\components.hpp"
			],
			[
				"",
				"src\\main.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 661.0,
		"selected_items":
		[
			[
				"",
				"/C/dev/SDLTEST/project.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 223.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
