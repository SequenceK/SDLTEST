{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"delta",
				"deltaVel"
			],
			[
				"Time",
				"Timer::dt"
			],
			[
				"m",
				"moveC"
			],
			[
				"move",
				"moveC"
			],
			[
				"alp",
				"alpha"
			],
			[
				"cure",
				"currentTime"
			],
			[
				"time",
				"time_in_seconds"
			],
			[
				"frame",
				"frame"
			],
			[
				"TIme",
				"Timer::slice"
			],
			[
				"overlap",
				"overlapY"
			],
			[
				"getPos",
				"getPos"
			],
			[
				"mo",
				"moveCS"
			],
			[
				"res",
				"result"
			],
			[
				"get",
				"getSDLRect"
			],
			[
				"Re",
				"Rect"
			],
			[
				"chec",
				"checking"
			],
			[
				"che",
				"checkedWith"
			],
			[
				"std",
				"std::endl"
			],
			[
				"sdlr",
				"sdlr1"
			],
			[
				"mov",
				"moveC"
			],
			[
				"ove",
				"overlapedMap"
			],
			[
				"overla",
				"overlapedMap"
			],
			[
				"over",
				"overlapedMap"
			],
			[
				"overl",
				"overlapedMap"
			],
			[
				"are",
				"area"
			],
			[
				"maxV",
				"maxVel"
			],
			[
				"ve",
				"vel"
			],
			[
				"foll",
				"followE"
			],
			[
				"Tim",
				"Timer::elapsed"
			],
			[
				"Timer",
				"Timer::slice"
			],
			[
				"update",
				"update"
			],
			[
				"moc",
				"moveCS"
			],
			[
				"shoo",
				"shooter"
			],
			[
				"Movem",
				"MoveComponent"
			],
			[
				"VE",
				"Vec2::getX"
			],
			[
				"check",
				"checking"
			],
			[
				"collide",
				"collide"
			],
			[
				"maxArea",
				"maxAreaID"
			],
			[
				"collid",
				"collided"
			],
			[
				"chek",
				"checking"
			],
			[
				"inde",
				"indexes"
			],
			[
				"for",
				"forv	Vector For Loop"
			],
			[
				"updat",
				"updateBounds(&worldbounds"
			],
			[
				"req",
				"require"
			],
			[
				"LUA",
				"LUA_SRC"
			],
			[
				"share",
				"std::shared_ptr"
			],
			[
				"fist",
				"first"
			],
			[
				"begi",
				"begin"
			],
			[
				"upd",
				"updateBounds"
			],
			[
				"worl",
				"worldbounds"
			],
			[
				"upda",
				"update"
			],
			[
				"wor",
				"worldMax"
			],
			[
				"Dr",
				"DrawRect"
			],
			[
				"ov",
				"overlapingWith"
			],
			[
				"fram",
				"frame"
			],
			[
				"tex",
				"text"
			],
			[
				"full",
				"fullscreen"
			],
			[
				"fas",
				"false"
			],
			[
				"Sim",
				"SimpleIni"
			],
			[
				"in",
				"include"
			],
			[
				"strin",
				"string_ptr"
			],
			[
				"null",
				"nullptr"
			],
			[
				"close",
				"closeLuaState"
			],
			[
				"lua_get",
				"lua_getdefault"
			],
			[
				"lual",
				"luaL_openlibs"
			],
			[
				"end",
				"endl"
			],
			[
				"stat",
				"state"
			],
			[
				"fun",
				"function"
			],
			[
				"def",
				"def	#ifndef … #define … #endif"
			],
			[
				"se",
				"sel::State"
			],
			[
				"cre",
				"createEntityID"
			],
			[
				"scr",
				"scripts"
			],
			[
				"Vec",
				"Vec2"
			],
			[
				"ret",
				"return"
			],
			[
				"new",
				"newVec2"
			],
			[
				"luaop",
				"luaopen_example"
			],
			[
				"player",
				"playerImgPath"
			],
			[
				"curr",
				"currentAnimation"
			],
			[
				"Wind",
				"Window"
			],
			[
				"curre",
				"currentAnimation"
			],
			[
				"pla",
				"played"
			],
			[
				"sprit",
				"spriteCS"
			],
			[
				"text",
				"textures"
			],
			[
				"sh",
				"shared_ptr"
			],
			[
				"dele",
				"delete"
			],
			[
				"pos",
				"postUpdate"
			],
			[
				"delet",
				"delete"
			],
			[
				"coll",
				"collisionCS"
			],
			[
				"SDL_KEY",
				"SDL_KEYUP"
			],
			[
				"Curre",
				"currentFrame"
			],
			[
				"reset",
				"resetVel"
			],
			[
				"movem",
				"movement"
			],
			[
				"st",
				"std::cout"
			],
			[
				"spri",
				"spriteC"
			],
			[
				"MO",
				"MoveComponent"
			],
			[
				"edg",
				"edgeCheckerUpdate"
			],
			[
				"grou",
				"groups"
			],
			[
				"collided",
				"collided"
			],
			[
				"typ",
				"typeinfo"
			],
			[
				"Func",
				"FuncQComponent"
			],
			[
				"Prop",
				"PropertiesComponent"
			],
			[
				"hold",
				"holdFace"
			],
			[
				"hodl",
				"holdFace"
			],
			[
				"hol",
				"holdFace"
			],
			[
				"bool",
				"boolProps"
			],
			[
				"Sprite",
				"SpriteComponent"
			],
			[
				"he",
				"height"
			],
			[
				"collisio",
				"collision"
			],
			[
				"collis",
				"collisionCS"
			],
			[
				"col",
				"collisionCS"
			],
			[
				"coli",
				"collided"
			],
			[
				"fla",
				"false"
			],
			[
				"fa",
				"false"
			],
			[
				"sho",
				"shooting"
			],
			[
				"stin",
				"stringProps"
			],
			[
				"string",
				"std::string"
			],
			[
				"max",
				"maxAreaID"
			],
			[
				"set",
				"setScale"
			],
			[
				"f",
				"fProps"
			],
			[
				"pro",
				"propCS"
			],
			[
				"el",
				"elapsed"
			],
			[
				"spr",
				"spriteCS"
			],
			[
				"bu",
				"bulletUpdate"
			],
			[
				"playe",
				"playerUpdate"
			],
			[
				"spi",
				"spriteCS"
			],
			[
				"Fun",
				"FuncQComponent"
			],
			[
				"Ev",
				"SDL_Event"
			],
			[
				"vec",
				"vector	std::vector"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/myMake.sublime-build",
			"settings":
			{
				"buffer_size": 626,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 1814,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 6976,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/console.cpp",
			"settings":
			{
				"buffer_size": 1,
				"line_ending": "Windows"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 1069,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/entities.cpp",
			"settings":
			{
				"buffer_size": 11335,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/CS.cpp",
			"settings":
			{
				"buffer_size": 5706,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/components.cpp",
			"settings":
			{
				"buffer_size": 11778,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"../include/system.h\"\n#include \"../include/window.h\"\n#include \"../include/CS.h\"\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <memory>\n#include <SDL2/SDL.h>\n\nfloat Timer::start{0};\nfloat Timer::end{0};\nfloat Timer::elapsed{0};\nfloat Timer::frame{1000.f/60.f};\nfloat Timer::slice{0.f};\ndouble Timer::t{0.0};\ndouble Timer::dt{0.01};\ndouble Timer::currentTime{0.0};\ndouble Timer::accumulator{0.0};\nfloat Timer::alpha{0.0};\n\n\n\nVec2 Vec2::operator*(float const& n){\n	x *= n;\n	y *= n;\n	return *this;\n}\n\nVec2 Vec2::operator*=(float const& n){\n	x *= n;\n	y *= n;\n	return *this;\n}\n\nVec2 Vec2::operator+=(Vec2 const& v){\n	x += v.x;\n	y += v.y;\n	return *this;\n}\n\nVec2 Vec2::operator-=(Vec2 const& v){\n	x -= v.x;\n	y -= v.y;\n	return *this;\n}\n\nbool Vec2::operator==(Vec2 const& v){\n	return (x == v.x) && (y == v.y);\n}\n\nfloat Vec2::getX() const {return x;}\nfloat Vec2::getY() const {return y;}\nvoid Vec2::setX(float xx){x = xx;}\nvoid Vec2::setY(float yy){y = yy;}\n\nbool inCamBounds(Vec2 pos, Camera* c){\n	if(pos.x < c->pos.x || pos.x > c->pos.x + c->size.x || pos.y < c->pos.y || pos.y > c->pos.y + c->size.y)\n		return false;\n	return true;\n}\n\nint DELTA = 0;\nbool outOfBounds(unsigned long id, SDL_Rect& bounds){\n	std::shared_ptr<CollisionComponent> c = CS::collisionCS[id];\n	if(c->rect.x < bounds.x || c->rect.x + c->rect.w > bounds.x + bounds.w || c->rect.y < bounds.y || c->rect.y + c->rect.h > bounds.y + bounds.h){\n		if(c->rect.x < bounds.x){\n			c->moveC->pos.x = bounds.x+DELTA;\n			c->touching |= RIGHT;\n		} else if( c->rect.x + c->rect.w > bounds.x + bounds.w) {\n			c->moveC->pos.x = bounds.x + bounds.w - c->rect.w-DELTA;\n			c->touching |= LEFT;\n		}\n		if(c->rect.y < bounds.y){\n			c->moveC->pos.y = bounds.y+DELTA; \n			c->touching |= TOP;\n		} else if( c->rect.y + c->rect.h > bounds.y + bounds.h) {\n			c->moveC->pos.y = bounds.y + bounds.h - c->rect.h-DELTA;\n			c->touching |= FLOOR;\n		}\n		return true;\n	}\n	return false;\n}\n\nbool checkOverlap(unsigned long id1, unsigned long id2, SDL_Rect* result){\n	SDL_Rect r1, r2;\n	r1 = CS::collisionCS[id1]->rect;\n	r2 = CS::collisionCS[id2]->rect;\n	if(SDL_IntersectRect(&r1, &r2, result))\n			return true;\n	return false;\n\n}\n\nvoid Grid::updateBounds(SDL_Rect *r){\n	bounds = *r;\n}\n\nvoid Grid::clear(){\n	activeIndexes.clear();\n}\n\nvoid Grid::draw(){\n	SDL_Rect r;\n	for(int i =0; i<((bounds.w*bounds.h)/(cellSize*cellSize));i++){\n		r = getRect(i);\n		if(activeIndexes[i].size()>0)\n			Window::DrawRect(&r, 0, 0, 255);\n		else\n			Window::DrawRect(&r, 200, 0, 0);\n	}\n}\n\nSDL_Rect Grid::getRect(const int index){\n	SDL_Rect r;\n	r.x = cellSize*index - bounds.w*floor(index/(bounds.w/cellSize));\n	r.y = floor(index/(bounds.w/cellSize))*cellSize;\n	r.w = cellSize;\n	r.h = cellSize;\n	return r;\n}\n\n\nstd::vector<unsigned long> Grid::getEntities(std::vector<int> indexes){\n	std::vector<unsigned long> result{};\n	for (auto i = indexes.begin(); i != indexes.end(); ++i)\n	{\n\n		result.insert(result.end(), activeIndexes[*i].begin(), activeIndexes[*i].end());\n	}\n	return result;\n}\n\nstd::vector<int> Grid::getIndex(unsigned long id){\n	SDL_Rect r1 = CS::collisionCS[id]->rect;\n	int xstart = int((floor(r1.x/cellSize)));\n	if(r1.x < bounds.x)\n		xstart = 0;\n	int xend = int((floor((r1.x+r1.w)/cellSize)));\n	int ystart = int((floor(r1.y/cellSize)));\n	if(r1.y < bounds.y)\n		ystart = 0;\n	int yend = int((floor((r1.y+r1.h)/cellSize)));\n	// if(r1.x > bounds.x+bounds.w || r1.x +r1.w < bounds.x || r1.y > bounds.y+bounds.h || r1.y +r1.h < bounds.y){\n	// 	return std::vector<int>(1, -1);\n	// }\n	std::vector<int> indexes;\n	int index = xstart + ystart*floor(bounds.w/cellSize);\n	//std::cout << index << std::endl;\n	for(int i=0; i<(yend-ystart+1); i++){\n		for(int g=0; g<(xend-xstart+1); g++){\n			index = xstart+g+ystart*floor(bounds.w/cellSize) + floor(bounds.w/cellSize)*i;\n			activeIndexes[index].push_back(id);\n			indexes.push_back(index);\n		}\n\n	}\n\n	return indexes;\n}\n\n\n\nvoid collide(eId e1, eId e2){\n	std::shared_ptr<CollisionComponent> c1 = CS::collisionCS[e1];\n	std::shared_ptr<CollisionComponent> c2 = CS::collisionCS[e2];\n	if(!c1->moveable && !c2->moveable)\n	{\n		return;\n	}\n\n	//create 2 rects. They are used to determine which direction the collision has taken place.\n	SDL_Rect r1, r2;\n	float dx1 = -c1->moveC->deltaPos.x + c1->moveC->pos.x;\n	float dy1 = -c1->moveC->deltaPos.y + c1->moveC->pos.y;\n	float dx2 = -c2->moveC->deltaPos.x + c2->moveC->pos.x;\n	float dy2 = -c2->moveC->deltaPos.y + c2->moveC->pos.y;\n	float absDX1 = (dx1>0)?dx1:(-dx1);\n	float absDY1 = (dy1>0)?dy1:-dy1;\n	float absDX2 = (dx2>0)?dx2:(-dx2);\n	float absDY2 = (dy2>0)?dy2:-dy2;\n	r1.x = c1->moveC->pos.x - (dx1>0?dx1:0);\n	r2.x = c2->moveC->pos.x - (dx2>0?dx2:0);\n	r1.y = c1->moveC->pos.y - (dy1>0?dy1:0);\n	r2.y = c2->moveC->pos.y - (dy2>0?dy2:0);\n	r1.w = c1->rect.w+absDX1;\n	r2.w = c2->rect.w+absDX2;\n	r1.h = c1->rect.h+absDY1;\n	r2.h = c2->rect.h+absDY2;\n	Window::DrawRect(&r1, 255,255,0);\n	Window::DrawRect(&r2, 255,255,0);\n	// SDL_Rect overlapRect;\n	// SDL_IntersectRect(&r1, &r2, &overlapRect);\n	float overlapX=0, overlapY=0;\n	int BIAS = 4;\n	SDL_Rect a;\n\n	if(dx1 != dx2)\n	{\n		float maxOverlapX = absDX1 + absDX2 + BIAS;\n		if((r1.x < r2.x + r2.w) && (r1.x + r1.w > r2.x) \n			&& (r1.y < r2.y + r2.h) && ( r1.y + r1.h > r2.y))\n		if(dx1 > dx2)\n		{\n			overlapX = r1.x + r1.w - r2.x;\n			if(overlapX > maxOverlapX)\n				overlapX = 0;\n			else{\n				c1->touching |= LEFT;\n				c2->touching |= RIGHT;\n			}\n		} else  {\n			overlapX = -(r2.x + r2.w - r1.x);\n			if(-overlapX > maxOverlapX)\n				overlapX = 0;\n			else{\n				c1->touching |= RIGHT;\n				c2->touching |= LEFT;\n			}\n		}\n		//std::cout << maxOverlapX << \" \" << overlapX << std::endl;\n	}\n\n	if(overlapX != 0){\n		if(!c2->moveable){\n			c1->moveC->pos.x = c1->moveC->pos.x - overlapX;\n			c1->moveC->vel.x = 0;\n		}\n		else if(!c1->moveable){\n			c2->moveC->pos.x = c2->moveC->pos.x + overlapX;\n			c2->moveC->vel.x = 0;\n		}\n	}\n	r1.x = c1->moveC->pos.x - (dx1>0?dx1:0);\n	r2.x = c2->moveC->pos.x - (dx2>0?dx2:0);\n	r1.y = c1->moveC->pos.y - (dy1>0?dy1:0);\n	r2.y = c2->moveC->pos.y - (dy2>0?dy2:0);\n	r1.w = c1->rect.w+absDX1;\n	r2.w = c2->rect.w+absDX2;\n	r1.h = c1->rect.h+absDY1;\n	r2.h = c2->rect.h+absDY2;\n\n	if(dy1 != dy2)\n	{\n		float maxOverlapY = absDY1 + absDY2 + BIAS;\n		if((r1.x < r2.x + r2.w) && (r1.x + r1.w > r2.x) \n			&& (r1.y < r2.y + r2.h) && ( r1.y + r1.h > r2.y))\n		if(dy1 > dy2)\n		{\n			overlapY = r1.y + r1.h - r2.y;\n			if(overlapY > maxOverlapY)\n				overlapY = 0;\n			else{\n				c1->touching |= FLOOR;\n				c2->touching |= TOP;\n			}\n		} else  {\n			overlapY = -(r2.y + r2.h - r1.y);\n			if(-overlapY > maxOverlapY)\n				overlapY = 0;\n			else{\n				c1->touching |= TOP;\n				c2->touching |= FLOOR;\n			}\n		}\n		//std::cout << absDY2 << \"<-2 1->\" << absDY1 << std::endl;\n	}\n\n	if(overlapY != 0){\n		if(!c2->moveable){\n			c1->moveC->setPosition(c1->moveC->pos.x, c1->moveC->pos.y-overlapY);\n			c1->moveC->vel.y = 0;\n		}\n		else if(!c1->moveable){\n			c2->moveC->setPosition(c2->moveC->pos.x, c2->moveC->pos.y+overlapY);\n			c2->moveC->vel.y = 0;\n		}\n	}\n	c1->updatePosition();\n	c2->updatePosition();\n}\n\nvoid seperateX(eId e1, eId e2){\n\n}\n\nvoid seperateY(eId e1, eId e2){\n\n}\n\nbool strToBool(std::string str){\n	if(str == \"False\" || str == \"0\" || str == \"false\")\n		return false;\n	else if(str == \"True\" || str == \"1\" || str == \"true\")\n		return true;\n	else{\n		std::cout << \"Value recieved not true nor false! returning false\" << std::endl;\n		return false;\n	}\n}",
			"file": "src/system.cpp",
			"file_size": 7723,
			"file_write_time": 130586269475707906,
			"settings":
			{
				"buffer_size": 7408,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/window.cpp",
			"settings":
			{
				"buffer_size": 3522,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/entities.h",
			"settings":
			{
				"buffer_size": 362,
				"line_ending": "Windows",
				"name": "#ifndef ENTITIES_H"
			}
		},
		{
			"file": "include/console.h",
			"settings":
			{
				"buffer_size": 127,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/window.h",
			"settings":
			{
				"buffer_size": 2904,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/system.h",
			"settings":
			{
				"buffer_size": 1389,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Omar/Desktop/Timestep.cpp",
			"settings":
			{
				"buffer_size": 2779,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/test.lua",
			"settings":
			{
				"buffer_size": 195,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/CS.h",
			"settings":
			{
				"buffer_size": 1621,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/components.h",
			"settings":
			{
				"buffer_size": 3800,
				"line_ending": "Windows"
			}
		},
		{
			"file": "config.ini",
			"settings":
			{
				"buffer_size": 170,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/myMake.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"insa",
				"Package Control: Install Package"
			],
			[
				"32",
				"Build: Run32"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"clea",
				"Build: Clean"
			],
			[
				"",
				"About"
			],
			[
				"buid",
				"Build: build32"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"pa",
				"Package Control: Remove Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"pac",
				"Package Control: Enable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"cle",
				"Build: Clean"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"clean",
				"Build: Clean"
			]
		],
		"width": 664.0
	},
	"console":
	{
		"height": 371.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/SDLTEST"
	],
	"file_history":
	[
		"/C/Users/Omar/AppData/Local/Temp/7zEBB81.tmp/Timestep.cpp",
		"/C/Users/Omar/AppData/Local/Temp/7zE45B5.tmp/Windows.h",
		"/C/Users/Omar/AppData/Local/Temp/7zE37B0.tmp/Apple.h",
		"/C/Users/Omar/AppData/Local/Temp/7zE29BA.tmp/Timestep.cpp",
		"/C/SDL/x86_64-w64-mingw32/include/SDL2/SDL_rect.h",
		"/C/dev/SDLTEST/.gitignore",
		"/C/dev/SDLTEST/5b408044-22d4-46d4-b960-9fe790b6acb4.dmp",
		"/C/dev/SDLTEST/include/LuaBridge/detail/Namespace.h",
		"/C/MinGW/msys/1.0/home/Omar/simpleini/SimpleIni.h",
		"/C/LuaJIT-2.0.3/src/lauxlib.h",
		"/C/LuaJIT-2.0.3/src/lua.hpp",
		"/C/LuaJIT-2.0.3/README",
		"/C/lua/5.1/include/lua.h",
		"/C/dev/SDLTEST/include/LuaBridge/LuaBridge.h",
		"/C/dev/SDLTEST/include/LuaBridge/detail/LuaHelpers.h",
		"/C/dev/SDLTEST/include/LuaBridge/detail/Stack.h",
		"/C/lua-5.1.5/INSTALL",
		"/C/lua-5.1.5/README",
		"/c/tdm-gcc-64/lib/gcc/x86_64-w64-mingw32/4.8.1/include/c++/bits/vector.tcc",
		"/C/MinGW/msys/1.0/home/Omar/simpleini/test1.cpp",
		"/C/dev/SDLTEST/scripts/myscript.sgs",
		"/C/dev/SDLTEST/include/luaState.h",
		"/C/Users/Omar/Desktop/SFMLTEST/src/system.cpp",
		"/C/dev/SDLTEST/src/main.cpp",
		"/C/sgscript/README.md",
		"/C/dev/SDLTEST/scripts/vars.lua",
		"/C/dev/SDLTEST/src/luaState.cpp",
		"/C/dev/SDLTEST/trash/luatest.cpp",
		"/C/dev/SDLTEST/include/selene/primitives.h",
		"/C/tolua-5.2.0/INSTALL",
		"/C/MinGW/msys/1.0/home/Omar/luna-gen/README",
		"/C/MinGW/msys/1.0/home/Omar/luna-gen/examples/README",
		"/C/tolua-5.2.0/README",
		"/C/dev/SDLTEST/include/luascript.h",
		"/C/dev/SDLTEST/src/luascript.cpp",
		"/C/dev/SDLTEST/src/luatest.cpp",
		"/C/Users/Omar/LuaState-master/README.md",
		"/C/Users/Omar/LuaState-master/test/main.cpp",
		"/C/Users/Omar/LuaState-master/test/get_test.cpp",
		"/C/Users/Omar/LuaState-master/test/test.h",
		"/C/dev/SDLTEST/src/example.cpp",
		"/C/dev/SDLTEST/src/example_wrap.cxx",
		"/C/dev/SDLTEST/src/example.i",
		"/C/dev/SDLTEST/include/example.h",
		"/C/Users/Omar/AppData/Local/Temp/7zE9D03.tmp/README",
		"/C/Users/Omar/AppData/Local/Temp/7zEF981.tmp/luawrapperutil.hpp",
		"/C/lua-5.2.3/src/luac.c",
		"/C/dev/SDLTEST/src/min.c",
		"/C/dev/SDLTEST/src/DELETED.txt",
		"/C/test.cpp",
		"/C/dev/SDLTEST/include/typedefs.h",
		"/C/dev/SDLTEST/Makefile",
		"/C/dev/SDLTEST/README.md",
		"/C/dev/SDLTEST/src/CS.cpp",
		"/Users/slouken/release/SDL/SDL2-2.0.3-source/src/main/windows/SDL_windows_main.c",
		"/C/dev/SDLTEST/bin/terminal.glue",
		"/C/dev/SDLTEST/data/player.png",
		"/C/dev/SDLTEST/include/cleanup.h",
		"/C/dev/SDLTEST/src/54dab505-fca9-4088-864e-1d5afaeb74ef.dmp",
		"/C/dev/SDLTEST/project.sublime-project",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/JSON.sublime-settings",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/Omar/Desktop/SFMLTEST/src/components.hpp",
		"/C/Users/Omar/Desktop/SFMLTEST/deleted",
		"/C/dev/SDLTEST/data/fonts/FONTLOG.txt",
		"/C/dev/SDLTEST/bin/LICENSE.tiff.txt",
		"/C/Users/Omar/Desktop/SFMLTEST/src/game.cpp",
		"/C/Users/Omar/Desktop/SFMLTEST/src/deleted controls code in update().txt",
		"/C/Users/Omar/Desktop/smart sweepers - v1.0/main.cpp",
		"/C/Users/Omar/Desktop/smart sweepers - v1.0/CMinesweeper.cpp",
		"/C/Users/Omar/Desktop/smart sweepers - v1.0/Script1.aps",
		"/C/Users/Omar/Desktop/smart sweepers - v1.0/Script1.rc",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/C++.sublime-settings",
		"/C/dev/SDLTEST/20e9789b-f58a-439b-8b8d-3411319382ce.dmp",
		"/C/dev/SDLTEST/fd8ca7fb-a8dc-40e7-9764-a500df7a3066.dmp",
		"/C/dev/SDLTEST/src/game.cpp",
		"/C/dev/SDLTEST/include/system.h",
		"/C/dev/SDLTEST/data/hello.png",
		"/C/dev/SDLTEST/bin/LICENSE.jpeg.txt",
		"/C/dev/SDLTEST/data/gameover.bmp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/myMake.sublime-build",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/Makefile/Make.sublime-build",
		"/C/Program Files (x86)/Sublime Text 2/Pristine Packages/Makefile.sublime-package",
		"/C/Program Files/Sublime Text 3/Packages/Makefile.sublime-package",
		"/C/dev/SDLTEST/src/window.cpp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/clang_format_custom.sublime-settings",
		"/C/dev/SDLTEST/include/window.h",
		"/C/dev/SDLTEST/src/DELETED.cpp",
		"/C/dev/SDLTEST/include/game.h",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/myMake.sublime-build",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/mingw32-make.sublime-build",
		"/C/dev/SDLTEST/src/game.h",
		"/C/dev/SDLTEST/src/cleanup.h",
		"/C/dev/SDLTEST/src/window.h",
		"/C/dev/SDLTEST/src/Makefile",
		"/C/mathart.cpp",
		"/C/MathPic.ppm",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/Distraction Free.sublime-settings",
		"/C/Users/Omar/Desktop/SFMLTEST/main.cpp",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/SFML2_C++.sublime-build",
		"/C/Users/Omar/myApp/game.js",
		"/C/Users/Omar/Desktop/SFMLTEST/build&run.bat",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/C++/C++.sublime-build",
		"/C/Users/Omar/Desktop/SFMLTEST/compile.sh",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/User/clangSFML.sublime-build",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Omar/AppData/Roaming/Sublime Text 2/Packages/C++/old_C++.sublime-build",
		"/C/Users/Omar/Desktop/EULER/P18.py",
		"/C/Users/Omar/Desktop/P18.py",
		"/C/Users/Omar/Desktop/htmlTest/test.html",
		"/C/Users/Omar/Desktop/htmlTest/scripts/app.js",
		"/C/Users/Omar/Desktop/craftyTest.html"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\dev\\SDLTEST\\include",
			"C:\\dev\\SDLTEST\\src",
			"C:\\dev\\SDLTEST\\include",
			"C:\\dev\\SDLTEST\\src",
			"C:\\dev\\SDLTEST\\bin"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"y",
			"c_str",
			"cstr",
			"getGlobalNamespace",
			"getgloabalnamespace",
			"worldBounds",
			"get",
			"bool",
			"true",
			"o",
			"O",
			"o",
			"O",
			")\n",
			"h",
			"CS::moveCS",
			"new FuncQComponent(id)",
			"new PropertiesComponent(id);",
			"new SpriteComponent(",
			"new SpriteComponent(\"../data/hello.png\", CS::moveCS, id)",
			"MoveComponent*",
			"SpriteComponent*",
			"MoveComponent*",
			"new CollisionComponent(",
			"new MoveComponent(",
			"*",
			"&",
			".erase(id)",
			"setc",
			"spriteCS",
			"moveCS[id]",
			"timer",
			"el",
			"elaps",
			"moveC",
			"funcQ",
			"funcQS",
			"Vec2<float>",
			"imgRect",
			"{\n",
			"x",
			"w",
			"x",
			"_INDEX",
			"x",
			"BIAS",
			"width",
			"rect",
			"acc",
			"collidingWith",
			"2",
			"x",
			"1",
			"c1->moveC->pos.x > c1->moveC->deltaPos.x",
			"maxV",
			"rect.",
			"w",
			"x",
			"spee",
			"gridH",
			"gridW",
			"gridY",
			"gridX",
			"it",
			"x",
			"w",
			"x",
			"1",
			"auto",
			"x",
			"depth < maxDepth",
			"QTs.size() > 0",
			"int",
			"r.",
			"Vec2<float>",
			"maxVel",
			"maxVel.y",
			"maxVel.x",
			"%10",
			"x",
			"->vec",
			"vec",
			"->x",
			"->y",
			"vx",
			"vy",
			"CSys",
			"test",
			"CSys::moveCS[test]",
			"[1]",
			"1",
			".map",
			"map",
			"1",
			"game.exe"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"x",
			"worldbounds",
			"moveCS",
			"std::shared_ptr<FuncQComponent>(new FuncQComponent(id));",
			"std::shared_ptr<PropertiesComponent>(new PropertiesComponent(id));",
			"std::shared_ptr<SpriteComponent>(",
			"std::shared_ptr<SpriteComponent>(new SpriteComponent(\"../data/hello.png\", CS::moveCS, id))",
			"std::shared_ptr<MoveComponent>",
			"std::shared_ptr<SpriteComponent>",
			"std::shared_ptr<MoveComponent>",
			"std::shared_ptr<CollisionComponent>(new CollisionComponent(",
			"std::shared_ptr<MoveComponent>(new MoveComponent(",
			">",
			"[id]",
			"COMP[moveC][id]",
			"CS::moveCS[id]",
			"Vec2",
			"result",
			"y",
			"h",
			"y",
			"_E_INDEX",
			"y",
			"w",
			"r",
			"vel",
			"1",
			"y",
			"2",
			"Xincreased",
			"moveC->pos.",
			"h",
			"y",
			"bounds.h",
			"bounds.w",
			"bounds.y",
			"bounds.x",
			"checking",
			"y",
			"h",
			"yh",
			"y",
			"2",
			"it-first",
			"unsigned int",
			"y",
			"QTs[0] != nullptr",
			"unsigned int",
			"auto",
			"r->",
			"Vec2f",
			"maxV",
			"mVy",
			"mVx",
			"/RAND_MAX",
			"y",
			"->vel",
			"vel",
			"->pos.x",
			"->pos.y",
			"vec.x",
			"vec.y",
			"CS",
			"id",
			"moveC",
			"[test]",
			"",
			"SPEED"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Omar/AppData/Roaming/Sublime Text 3/Packages/User/myMake.sublime-build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 626,
						"regions":
						{
						},
						"selection":
						[
							[
								187,
								187
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1814,
						"regions":
						{
						},
						"selection":
						[
							[
								998,
								998
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6976,
						"regions":
						{
						},
						"selection":
						[
							[
								3004,
								3004
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2039.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/console.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++11/C++11.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1069,
						"regions":
						{
						},
						"selection":
						[
							[
								751,
								483
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/entities.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11335,
						"regions":
						{
						},
						"selection":
						[
							[
								5639,
								5639
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3083.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/CS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5706,
						"regions":
						{
						},
						"selection":
						[
							[
								4264,
								4264
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1188.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/components.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11778,
						"regions":
						{
						},
						"selection":
						[
							[
								10442,
								10442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 2.0,
						"translation.y": 7781.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/system.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7408,
						"regions":
						{
						},
						"selection":
						[
							[
								6994,
								6994
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4361.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3522,
						"regions":
						{
						},
						"selection":
						[
							[
								1239,
								1239
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		},
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 10,
					"file": "include/entities.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 362,
						"regions":
						{
						},
						"selection":
						[
							[
								362,
								362
							]
						],
						"settings":
						{
							"auto_name": "#ifndef ENTITIES_H",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "include/console.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 127,
						"regions":
						{
						},
						"selection":
						[
							[
								127,
								127
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "include/window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2904,
						"regions":
						{
						},
						"selection":
						[
							[
								1823,
								1823
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 709.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "include/system.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1389,
						"regions":
						{
						},
						"selection":
						[
							[
								473,
								473
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/Users/Omar/Desktop/Timestep.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2779,
						"regions":
						{
						},
						"selection":
						[
							[
								1152,
								1152
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "scripts/test.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 195,
						"regions":
						{
						},
						"selection":
						[
							[
								195,
								195
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "include/CS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1621,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "include/components.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3800,
						"regions":
						{
						},
						"selection":
						[
							[
								789,
								789
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "config.ini",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 170,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								30
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.524495677233,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 251.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"project": "project.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"ex",
				"src\\example.i"
			],
			[
				"com",
				"src\\components.cpp"
			],
			[
				"cs",
				"include\\CS.h"
			],
			[
				"comp",
				"C:\\Users\\Omar\\Desktop\\SFMLTEST\\src\\components.hpp"
			],
			[
				"",
				"src\\main.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 661.0,
		"selected_items":
		[
			[
				"",
				"/C/dev/SDLTEST/project.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"ini",
				"Init"
			],
			[
				"inti",
				"Init"
			],
			[
				"",
				"update"
			],
			[
				"out",
				"outOfBounds"
			],
			[
				"draw",
				"Draw"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 185.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
